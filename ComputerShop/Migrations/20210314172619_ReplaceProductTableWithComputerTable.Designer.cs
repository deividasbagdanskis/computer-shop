// <auto-generated />
using System;
using ComputerShop.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ComputerShop.Migrations
{
    [DbContext(typeof(ComputerShopContext))]
    [Migration("20210314172619_ReplaceProductTableWithComputerTable")]
    partial class ReplaceProductTableWithComputerTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ComputerShop.Models.CartItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("CartItem");
                });

            modelBuilder.Entity("ComputerShop.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Laptops"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Desktops"
                        });
                });

            modelBuilder.Entity("ComputerShop.Models.Computer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CPU")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<double>("ClockSpeed")
                        .HasColumnType("float");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Cores")
                        .HasColumnType("int");

                    b.Property<string>("GPU")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("RAM")
                        .HasColumnType("int");

                    b.Property<double?>("ScreenSize")
                        .HasColumnType("float");

                    b.Property<string>("ScreenType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Storage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Computer");

                    b.HasData(
                        new
                        {
                            Id = "0e437e87-e6ce-4eaf-ae27-d2b3eae3515c",
                            CPU = "AMD Ryzen™ 5 4600H",
                            CategoryId = 1,
                            ClockSpeed = 3.0,
                            Color = "Black",
                            Cores = 6,
                            GPU = "NVIDIA GeForce GTX 1650 Ti 4GB",
                            Image = "lenovo.jpg",
                            Name = "Lenovo IdeaPad Gaming 3 15ARH05",
                            Price = 839.0,
                            RAM = 8,
                            ScreenSize = 15.6,
                            ScreenType = "FullHD IPS 60Hz",
                            Storage = 256
                        },
                        new
                        {
                            Id = "3ddd1552-d313-4544-ad82-2c8e44a44fa4",
                            CPU = "AMD Ryzen 3 4300U",
                            CategoryId = 1,
                            ClockSpeed = 2.7000000000000002,
                            Color = "Silver",
                            Cores = 4,
                            GPU = "AMD Radeon",
                            Image = "acer.jpg",
                            Name = "Acer Aspire 5 A515-44-R415",
                            Price = 499.99000000000001,
                            RAM = 4,
                            ScreenSize = 15.6,
                            ScreenType = "IPS Full HD",
                            Storage = 256
                        },
                        new
                        {
                            Id = "3683cffb-3f2b-48b4-86e5-2727a7ad2d8f",
                            CPU = "AMD Ryzen™ 3 4300U",
                            CategoryId = 1,
                            ClockSpeed = 2.7000000000000002,
                            Color = "Black",
                            Cores = 4,
                            GPU = "AMD Radeon",
                            Image = "lenovo_2.jpg",
                            Name = "Lenovo ThinkPadT E14 GEN 2",
                            Price = 499.99000000000001,
                            RAM = 8,
                            ScreenSize = 14.0,
                            ScreenType = "Full HD",
                            Storage = 256
                        },
                        new
                        {
                            Id = "1c14d6b7-c165-4527-a601-d3669e1c0966",
                            CPU = "Intel® Core™ i5-10300H",
                            CategoryId = 1,
                            ClockSpeed = 2.5,
                            Color = "Blue",
                            Cores = 4,
                            GPU = "Geforce GTX 1650 4GB",
                            Image = "lenovo_3.jpg",
                            Name = "LENOVO Gaming 3",
                            Price = 688.0,
                            RAM = 8,
                            ScreenSize = 15.6,
                            ScreenType = "Full HD",
                            Storage = 256
                        },
                        new
                        {
                            Id = "93065899-890f-4cef-ba3a-fa32d1934155",
                            CPU = "Intel Celeron N4000",
                            CategoryId = 1,
                            ClockSpeed = 1.1000000000000001,
                            Color = "Dark Grey",
                            Cores = 2,
                            GPU = "Intel UHD Graphics 600",
                            Image = "hp.jpg",
                            Name = "HP 250 G7",
                            Price = 394.0,
                            RAM = 4,
                            ScreenSize = 15.6,
                            ScreenType = "Full HD",
                            Storage = 128
                        },
                        new
                        {
                            Id = "fb6d71b0-50fe-42fd-90b3-387fc63ef422",
                            CPU = "AMD Ryzen™ 5 4500U",
                            CategoryId = 1,
                            ClockSpeed = 2.2999999999999998,
                            Color = "Grey",
                            Cores = 6,
                            GPU = "AMD Radeon",
                            Image = "lenovo_4.jpg",
                            Name = "Lenovo Yoga Slim 7",
                            Price = 749.0,
                            RAM = 8,
                            ScreenSize = 14.0,
                            ScreenType = "IPS Full HD",
                            Storage = 512
                        },
                        new
                        {
                            Id = "f78a9382-a8f2-454d-ae8a-ef364da9186d",
                            CPU = "Intel® Core™ i7-9700K",
                            CategoryId = 2,
                            ClockSpeed = 3.6000000000000001,
                            Color = "Black",
                            Cores = 8,
                            GPU = "GeForce™ GTX 1660 Ti 6GB",
                            Image = "EVOLIUCINIS.jpg",
                            Name = "EVOLIUCINIS i7 X8",
                            Price = 999.99000000000001,
                            RAM = 8,
                            Storage = 480
                        },
                        new
                        {
                            Id = "c85a55a3-432e-402f-b956-1ff094332e97",
                            CPU = "Intel® Core™ i9-9900K",
                            CategoryId = 2,
                            ClockSpeed = 3.6000000000000001,
                            Color = "Black",
                            Cores = 8,
                            GPU = "MSI GEFORCE® RTX 2080 SUPER 8 GB",
                            Image = "MSI_EXTREME.jpg",
                            Name = "MSI EXTREME",
                            Price = 1799.99,
                            RAM = 16,
                            Storage = 500
                        },
                        new
                        {
                            Id = "0723df6d-e484-48b3-bd1e-efde35d8c52a",
                            CPU = "AMD Ryzen™ 5 2600",
                            CategoryId = 2,
                            ClockSpeed = 3.3999999999999999,
                            Color = "Black",
                            Cores = 6,
                            GPU = "GeForce™ GTX 1650 4GB",
                            Image = "RYZEN_5_GT2.jpg",
                            Name = "RYZEN 5 GT2",
                            Price = 499.99000000000001,
                            RAM = 8,
                            Storage = 480
                        },
                        new
                        {
                            Id = "0fd0e843-9dd8-41e3-a104-729c4feb2dac",
                            CPU = "AMD Ryzen™ 5 2600",
                            CategoryId = 2,
                            ClockSpeed = 3.3999999999999999,
                            Color = "Black",
                            Cores = 6,
                            GPU = "GeForce™ GTX 1660 6GB",
                            Image = "RYZEN_5_GTX.jpg",
                            Name = "RYZEN 5 GTX",
                            Price = 599.99000000000001,
                            RAM = 8,
                            Storage = 480
                        });
                });

            modelBuilder.Entity("ComputerShop.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("ComputerShop.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "c971865f-a42c-44dd-8133-e321bff58a6f",
                            ConcurrencyStamp = "6036451f-7a29-450b-bf7e-ef5870a4fc49",
                            Name = "Administrator"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ComputerShop.Models.CartItem", b =>
                {
                    b.HasOne("ComputerShop.Models.Order", "Order")
                        .WithMany("CartItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ComputerShop.Models.Computer", b =>
                {
                    b.HasOne("ComputerShop.Models.Category", "Category")
                        .WithMany("Computers")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ComputerShop.Models.Order", b =>
                {
                    b.HasOne("ComputerShop.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ComputerShop.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ComputerShop.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComputerShop.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ComputerShop.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ComputerShop.Models.Category", b =>
                {
                    b.Navigation("Computers");
                });

            modelBuilder.Entity("ComputerShop.Models.Order", b =>
                {
                    b.Navigation("CartItems");
                });
#pragma warning restore 612, 618
        }
    }
}
